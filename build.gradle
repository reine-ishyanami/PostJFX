plugins {
    id 'java'
    id 'application'
    id 'org.javamodularity.moduleplugin' version "${modulePluginVersion}"
    id 'org.openjfx.javafxplugin' version "${javafxPluginVersion}"
    id 'org.beryx.jlink' version "${jlinkVersion}"
    id 'com.gluonhq.gluonfx-gradle-plugin' version "${gluonfxVersion}"
}

// 引入graalvm打包配置
apply from: 'native.gradle'

repositories {
    mavenCentral()
}

sourceCompatibility = "${javaVersion}"
targetCompatibility = "${javaVersion}"

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

application {
    mainModule = "${mainModuleName}"
    mainClass = "${mainClassName}"
}

javafx {
    version = "${javafxVersion}"
    modules = ['javafx.controls', 'javafx.fxml']
}

dependencies {
    implementation "org.xerial:sqlite-jdbc:${sqliteVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    testImplementation("org.junit.jupiter:junit-jupiter-api:${junitVersion}")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:${junitVersion}")
}

test {
    useJUnitPlatform()
}

jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = "${appName}"
        noConsole = true
    }
    jpackage {
        icon = layout.buildDirectory.file("resources/main/image/favicon.ico").getOrNull().asFile
        imageName = "${appName}"
        vendor = "${vendorName}"
        def currentSystem = org.gradle.internal.os.OperatingSystem.current()
        if (currentSystem.windows) {
            installerOptions += [
                    '--win-per-user-install',
                    '--win-dir-chooser',
                    '--win-menu',
                    '--win-shortcut',
                    '--win-menu-group', 'PostJFX'
            ]
        }
        if (currentSystem.linux){
            installerOptions += [
                    '--linux-shortcut',
                    '--linux-menu-group', 'PostJFX'
            ]
        }
        if (currentSystem.macOsX){

        }
    }
}
